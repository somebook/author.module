= render "author/publication_patterns/index"
:coffeescript
  jQuery ->
    $(".sticky a").bind 'ajax:before', (e) ->
      if $(this).parent().hasClass("sticked")
        # $(this).parent().removeClass("sticked")
        #         $(this).text("#{t('author.post.stick')}")
      else
        $(".sticky").removeClass("sticked")
        $(this).parent().addClass("sticked")
        $(this).text("#{t('author.post.sticked')}")
    $(".btn-publish").bind 'ajax:before', (e) ->
      $(this).button('loading')
    $(".btn-publish").bind 'ajax:success', (evt, data, status, xhr) ->
      st = $(this).parent().parent()
      $(st).html($(xhr.responseText).html())
%header

  - if @shard_languages.empty?
    .alert.alert-warning.clearfix= translate('author.post.no_languages_alert')
  - else
  %div.pull-right
    .btn-group.post-settings
      %a{ href: new_post_path(:stream => Account::STREAMS.invert[params[:stream].to_sym]), class: %w(btn btn-inverse)}
        %i.icon-white.icon-plus
        = t('author.post.new')
      %button.btn.btn-inverse.dropdown-toggle{ "data-toggle" => "dropdown" }
        = t('author.post.add_pattern_post')
        %span.caret
      %ul.dropdown-menu
        - @patterns.each do |pattern|
          %li
            %a{ href: new_post_path(:stream => Account::STREAMS.invert[params[:stream].to_sym], pattern: pattern.id) }
              = pattern.name
  %h1
    %i{ class: "icon48-#{params[:stream] == 'personal' ? 'blog' : 'news'}"}
    = translate("author.post.list_#{params[:stream]}")
= render partial: "author/shared/flash_messages"
%ul.breadcrumb
  %li
    %a{ href: "#"} Home
    %span.divider /
  %li.active Posts

%section.content
  %div.block
    %table.table.table-striped.data
      %tr
        %th= t("author.post.posts.title")
        %th
          - if @current_shard.settings.has_site
            = t("author.post.posts.domain")
          - else
            = t("author.post.posts.lang")
        %th= t("author.post.posts.blog_action")
        %th= t("author.post.posts.created_at")
        %th= t("author.post.posts.status")
        %th
        %th= t("author.post.posts.post_analitic")                
      - @posts.each do |post|
        = render 'post', post: post
    = will_paginate(@posts)
